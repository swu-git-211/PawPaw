{"ast":null,"code":"/*import React, { useState } from 'react';\r\n// eslint-disable-next-line \r\nimport { Card, Box, Grid, Typography, IconButton, Button, TextField } from '@mui/material';\r\nimport ReviewsIcon from '@mui/icons-material/Reviews';\r\nimport IosShareIcon from '@mui/icons-material/IosShare';\r\nimport LikeButton from './LikeButton';  // ปุ่มไลค์ที่คุณสร้างไว้\r\nimport DeleteButton from './DeleteButton';  // ปุ่มลบที่คุณสร้างไว้\r\nimport { shareContent } from './shareUtil';  // สำหรับแชร์\r\nimport axios from 'axios';\r\n\r\nconst Reply = ({ comment, postId, fetchComments, currentUserId }) => {\r\n  const [newReply, setNewReply] = useState('');\r\n  const [showReplyBox, setShowReplyBox] = useState(false);\r\n\r\n  const handleReply = async () => {\r\n    if (newReply.trim() === '') return;\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.post(\r\n        `http://localhost:5000/pawpaw_test/posts/${postId}/comment`,\r\n        { content: newReply, parentCommentId: comment._id },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setNewReply('');\r\n      setShowReplyBox(false);\r\n      fetchComments(); // Refresh comments after reply\r\n    } catch (error) {\r\n      console.error('Error replying to comment:', error);\r\n    }\r\n  };\r\n\r\n  const handleLikeReply = async (replyId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        alert('Please log in to like the reply.');\r\n        return;\r\n      }\r\n\r\n      const response = await axios.post(\r\n        `http://localhost:5000/pawpaw_test/comments/${replyId}/like`,\r\n        {},\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      if (response.data.success) {\r\n        fetchComments(); // Refresh comments to reflect like changes\r\n      }\r\n    } catch (error) {\r\n      console.error('Error liking the reply:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteReply = async (replyId, commentId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        alert('Please log in to delete the reply.');\r\n        return;\r\n      }\r\n  \r\n      const response = await axios.delete(`http://localhost:5000/pawpaw_test/comments/${commentId}/replies/${replyId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n  \r\n      if (response.status === 200) {\r\n        alert('Reply deleted successfully.');\r\n        fetchComments(); // รีเฟรชคอมเมนต์หลังจากการลบ\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to delete reply:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ marginLeft: '16px', marginTop: '8px' }}>\r\n      <Card\r\n        sx={{\r\n          marginBottom: '8px',\r\n          padding: '12px',\r\n          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\r\n          borderRadius: '6px',\r\n        }}\r\n      >\r\n\r\n        {/* Delete button for the current user's reply */ /*}/*\r\n                                                          {currentUserId && comment.userId && currentUserId.toString() === comment.userId.toString() && (\r\n                                                          <Box sx={{ position: 'absolute', top: '8px', right: '8px' }}>\r\n                                                          <DeleteButton onDelete={() => handleDeleteReply(comment._id)} />\r\n                                                          </Box>\r\n                                                          )}\r\n                                                          {/* Username, Date, and Time */ /*}/*\r\n                                                                                          <Typography variant=\"subtitle2\" sx={{ color: 'gray' }}>\r\n                                                                                          {comment.userId?.username || 'Unknown'} •{' '}\r\n                                                                                          {new Date(comment.createdAt).toLocaleDateString()} •{' '}\r\n                                                                                          {new Date(comment.createdAt).toLocaleTimeString()}\r\n                                                                                          </Typography>\r\n                                                                                          {/* Content of the Reply */ /*}/*\r\n                                                                                                                      <Typography variant=\"body1\" sx={{ marginTop: '4px' }}>\r\n                                                                                                                      {comment.content}\r\n                                                                                                                      </Typography>\r\n                                                                                                                      {/* Like, Reply, and Share Actions */ /*}/*\r\n                                                                                                                                                            <Box sx={{ display: 'flex', alignItems: 'center', marginTop: '8px', gap: '8px' }}>\r\n                                                                                                                                                            <LikeButton\r\n                                                                                                                                                            likedByUser={currentUserId ? comment.likes.includes(currentUserId) : false}\r\n                                                                                                                                                            onLike={() => handleLikeReply(comment._id)}\r\n                                                                                                                                                            likeCount={comment.likes.length}\r\n                                                                                                                                                            />\r\n                                                                                                                                                            <IconButton onClick={() => setShowReplyBox(!showReplyBox)}>\r\n                                                                                                                                                            <ReviewsIcon />\r\n                                                                                                                                                            </IconButton>\r\n                                                                                                                                                            <IconButton onClick={() => shareContent({ title: comment.content, url: window.location.href })}>\r\n                                                                                                                                                            <IosShareIcon />\r\n                                                                                                                                                            </IconButton>\r\n                                                                                                                                                            </Box>\r\n                                                                                                                                                            {showReplyBox && (\r\n                                                                                                                                                            <Box sx={{ marginTop: '8px', display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                                                                                                                                                            <TextField\r\n                                                                                                                                                            placeholder=\"Write a reply...\"\r\n                                                                                                                                                            variant=\"outlined\"\r\n                                                                                                                                                            size=\"small\"\r\n                                                                                                                                                            value={newReply}\r\n                                                                                                                                                            onChange={(e) => setNewReply(e.target.value)}\r\n                                                                                                                                                            sx={{ flex: 1 }} // ให้ TextField ใช้พื้นที่ที่เหลือ\r\n                                                                                                                                                            />\r\n                                                                                                                                                            <Button variant=\"contained\" color=\"primary\" onClick={handleReply}>\r\n                                                                                                                                                            Reply\r\n                                                                                                                                                            </Button>\r\n                                                                                                                                                            </Box>\r\n                                                                                                                                                            )}\r\n                                                                                                                                                            </Card>\r\n                                                                                                                                                            {/* Recursive Replies */ /*}/*\r\n                                                                                                                                                                                     {comment.replies && comment.replies.length > 0 && (\r\n                                                                                                                                                                                     <Box>\r\n                                                                                                                                                                                     {comment.replies.map((reply) => (\r\n                                                                                                                                                                                     <Reply\r\n                                                                                                                                                                                     key={reply._id}\r\n                                                                                                                                                                                     comment={reply}\r\n                                                                                                                                                                                     postId={postId}\r\n                                                                                                                                                                                     fetchComments={fetchComments}\r\n                                                                                                                                                                                     currentUserId={currentUserId}\r\n                                                                                                                                                                                     />\r\n                                                                                                                                                                                     ))}\r\n                                                                                                                                                                                     </Box>\r\n                                                                                                                                                                                     )}\r\n                                                                                                                                                                                     </Box>\r\n                                                                                                                                                                                     );\r\n                                                                                                                                                                                     };\r\n                                                                                                                                                                                     export default Reply;*/","map":{"version":3,"names":[],"sources":["D:/de351/pawpaw/frontend/src/components/Reply.js"],"sourcesContent":["/*import React, { useState } from 'react';\r\n// eslint-disable-next-line \r\nimport { Card, Box, Grid, Typography, IconButton, Button, TextField } from '@mui/material';\r\nimport ReviewsIcon from '@mui/icons-material/Reviews';\r\nimport IosShareIcon from '@mui/icons-material/IosShare';\r\nimport LikeButton from './LikeButton';  // ปุ่มไลค์ที่คุณสร้างไว้\r\nimport DeleteButton from './DeleteButton';  // ปุ่มลบที่คุณสร้างไว้\r\nimport { shareContent } from './shareUtil';  // สำหรับแชร์\r\nimport axios from 'axios';\r\n\r\nconst Reply = ({ comment, postId, fetchComments, currentUserId }) => {\r\n  const [newReply, setNewReply] = useState('');\r\n  const [showReplyBox, setShowReplyBox] = useState(false);\r\n\r\n  const handleReply = async () => {\r\n    if (newReply.trim() === '') return;\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.post(\r\n        `http://localhost:5000/pawpaw_test/posts/${postId}/comment`,\r\n        { content: newReply, parentCommentId: comment._id },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setNewReply('');\r\n      setShowReplyBox(false);\r\n      fetchComments(); // Refresh comments after reply\r\n    } catch (error) {\r\n      console.error('Error replying to comment:', error);\r\n    }\r\n  };\r\n\r\n  const handleLikeReply = async (replyId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        alert('Please log in to like the reply.');\r\n        return;\r\n      }\r\n\r\n      const response = await axios.post(\r\n        `http://localhost:5000/pawpaw_test/comments/${replyId}/like`,\r\n        {},\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      if (response.data.success) {\r\n        fetchComments(); // Refresh comments to reflect like changes\r\n      }\r\n    } catch (error) {\r\n      console.error('Error liking the reply:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteReply = async (replyId, commentId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        alert('Please log in to delete the reply.');\r\n        return;\r\n      }\r\n  \r\n      const response = await axios.delete(`http://localhost:5000/pawpaw_test/comments/${commentId}/replies/${replyId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n  \r\n      if (response.status === 200) {\r\n        alert('Reply deleted successfully.');\r\n        fetchComments(); // รีเฟรชคอมเมนต์หลังจากการลบ\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to delete reply:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ marginLeft: '16px', marginTop: '8px' }}>\r\n      <Card\r\n        sx={{\r\n          marginBottom: '8px',\r\n          padding: '12px',\r\n          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\r\n          borderRadius: '6px',\r\n        }}\r\n      >\r\n\r\n        {/* Delete button for the current user's reply *//*}/*\r\n        {currentUserId && comment.userId && currentUserId.toString() === comment.userId.toString() && (\r\n        <Box sx={{ position: 'absolute', top: '8px', right: '8px' }}>\r\n            <DeleteButton onDelete={() => handleDeleteReply(comment._id)} />\r\n        </Box>\r\n        )}\r\n\r\n        {/* Username, Date, and Time *//*}/*\r\n        <Typography variant=\"subtitle2\" sx={{ color: 'gray' }}>\r\n          {comment.userId?.username || 'Unknown'} •{' '}\r\n          {new Date(comment.createdAt).toLocaleDateString()} •{' '}\r\n          {new Date(comment.createdAt).toLocaleTimeString()}\r\n        </Typography>\r\n\r\n        {/* Content of the Reply *//*}/*\r\n        <Typography variant=\"body1\" sx={{ marginTop: '4px' }}>\r\n          {comment.content}\r\n        </Typography>\r\n\r\n        {/* Like, Reply, and Share Actions *//*}/*\r\n        <Box sx={{ display: 'flex', alignItems: 'center', marginTop: '8px', gap: '8px' }}>\r\n          <LikeButton\r\n            likedByUser={currentUserId ? comment.likes.includes(currentUserId) : false}\r\n            onLike={() => handleLikeReply(comment._id)}\r\n            likeCount={comment.likes.length}\r\n          />\r\n          <IconButton onClick={() => setShowReplyBox(!showReplyBox)}>\r\n            <ReviewsIcon />\r\n          </IconButton>\r\n          <IconButton onClick={() => shareContent({ title: comment.content, url: window.location.href })}>\r\n            <IosShareIcon />\r\n          </IconButton>\r\n        </Box>\r\n\r\n        {showReplyBox && (\r\n        <Box sx={{ marginTop: '8px', display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n            <TextField\r\n            placeholder=\"Write a reply...\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            value={newReply}\r\n            onChange={(e) => setNewReply(e.target.value)}\r\n            sx={{ flex: 1 }} // ให้ TextField ใช้พื้นที่ที่เหลือ\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleReply}>\r\n            Reply\r\n            </Button>\r\n        </Box>\r\n        )}\r\n      </Card>\r\n\r\n      {/* Recursive Replies *//*}/*\r\n      {comment.replies && comment.replies.length > 0 && (\r\n        <Box>\r\n          {comment.replies.map((reply) => (\r\n            <Reply\r\n              key={reply._id}\r\n              comment={reply}\r\n              postId={postId}\r\n              fetchComments={fetchComments}\r\n              currentUserId={currentUserId}\r\n            />\r\n          ))}\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Reply;*/\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDArFA,CAqFyD;AACzD;AACA;AACA;AACA;AACA;AACA,yFANyD,CAOlB;AACvC;AACA;AACA;AACA;AACA;AACA,qHANuC,CAOJ;AACnC;AACA;AACA;AACA,2JAJmC,CAKU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oLA9B6C,CAgCf;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}