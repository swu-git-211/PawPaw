{"ast":null,"code":"var _jsxFileName = \"D:\\\\de351\\\\pawpaw\\\\frontend\\\\src\\\\components\\\\Post.js\";\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport Post from './Post';\nimport axios from 'axios';\nimport { shareContent } from './shareUtil';\nimport '@testing-library/jest-dom';\n\n// Mock axios and shareContent\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\njest.mock('axios');\njest.mock('./shareUtil', () => ({\n  shareContent: jest.fn()\n}));\nconst mockPost = {\n  _id: '1',\n  content: 'Check out this cute dog!',\n  likes: ['user123']\n};\nconst mockComments = [{\n  _id: '1',\n  content: 'Aww, so cute!'\n}, {\n  _id: '2',\n  content: 'I love this dog!'\n}];\ndescribe('Post Component', () => {\n  beforeEach(() => {\n    // Mock localStorage data\n    localStorage.setItem('token', 'mocked-token');\n    localStorage.setItem('userId', 'user123');\n  });\n  it('should render the post content and likes correctly', async () => {\n    // Mock the axios response for post and comments\n    axios.get.mockResolvedValueOnce({\n      data: {\n        comments: mockComments\n      }\n    });\n    render(/*#__PURE__*/_jsxDEV(Post, {\n      post: mockPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this));\n\n    // Check if the post content is rendered\n    expect(screen.getByText(mockPost.content)).toBeInTheDocument();\n    // Check if the like count is rendered\n    expect(screen.getByText('1 like')).toBeInTheDocument();\n  });\n  it('should handle adding a new comment', async () => {\n    axios.get.mockResolvedValueOnce({\n      data: {\n        comments: mockComments\n      }\n    });\n    axios.post.mockResolvedValueOnce({\n      data: {\n        success: true,\n        comment: {\n          _id: '3',\n          content: 'Nice post!'\n        }\n      }\n    });\n    render(/*#__PURE__*/_jsxDEV(Post, {\n      post: mockPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this));\n\n    // Input a new comment\n    const commentInput = screen.getByPlaceholderText('Write a comment...');\n    fireEvent.change(commentInput, {\n      target: {\n        value: 'Nice post!'\n      }\n    });\n\n    // Submit the comment\n    const commentButton = screen.getByText('Comment');\n    fireEvent.click(commentButton);\n\n    // Wait for the new comment to be displayed\n    await waitFor(() => screen.getByText('Nice post!'));\n\n    // Check if the new comment is added\n    expect(screen.getByText('Nice post!')).toBeInTheDocument();\n  });\n  it('should handle liking the post', async () => {\n    axios.get.mockResolvedValueOnce({\n      data: {\n        comments: mockComments\n      }\n    });\n    axios.post.mockResolvedValueOnce({\n      data: {\n        success: true,\n        likes: ['user123', 'user456']\n      }\n    });\n    render(/*#__PURE__*/_jsxDEV(Post, {\n      post: mockPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this));\n\n    // Click the like button\n    const likeButton = screen.getByTestId('like-button');\n    fireEvent.click(likeButton);\n\n    // Wait for like count to update\n    await waitFor(() => screen.getByText('2 likes'));\n\n    // Check if like count has been updated\n    expect(screen.getByText('2 likes')).toBeInTheDocument();\n  });\n  it('should handle sharing the post', () => {\n    render(/*#__PURE__*/_jsxDEV(Post, {\n      post: mockPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 12\n    }, this));\n\n    // Click the share button\n    const shareButton = screen.getByTestId('share-button');\n    fireEvent.click(shareButton);\n\n    // Check if the shareContent function was called\n    expect(shareContent).toHaveBeenCalledTimes(1);\n    expect(shareContent).toHaveBeenCalledWith({\n      title: mockPost.content,\n      text: mockPost.content,\n      url: `${window.location.origin}/posts/${mockPost._id}`\n    });\n  });\n  it('should show an error if user is not logged in and tries to like or comment', async () => {\n    // Remove token from localStorage to simulate user not being logged in\n    localStorage.removeItem('token');\n    render(/*#__PURE__*/_jsxDEV(Post, {\n      post: mockPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 12\n    }, this));\n\n    // Try to like the post\n    const likeButton = screen.getByTestId('like-button');\n    fireEvent.click(likeButton);\n\n    // Ensure the error message is displayed\n    await waitFor(() => expect(screen.getByText('Please log in to like the post.')).toBeInTheDocument());\n\n    // Try to comment on the post\n    const commentInput = screen.getByPlaceholderText('Write a comment...');\n    fireEvent.change(commentInput, {\n      target: {\n        value: 'Nice post!'\n      }\n    });\n    const commentButton = screen.getByText('Comment');\n    fireEvent.click(commentButton);\n\n    // Ensure the error message is displayed\n    await waitFor(() => expect(screen.getByText('Please log in to comment.')).toBeInTheDocument());\n  });\n});","map":{"version":3,"names":["render","screen","fireEvent","waitFor","Post","axios","shareContent","jsxDEV","_jsxDEV","jest","mock","fn","mockPost","_id","content","likes","mockComments","describe","beforeEach","localStorage","setItem","it","get","mockResolvedValueOnce","data","comments","post","fileName","_jsxFileName","lineNumber","columnNumber","expect","getByText","toBeInTheDocument","success","comment","commentInput","getByPlaceholderText","change","target","value","commentButton","click","likeButton","getByTestId","shareButton","toHaveBeenCalledTimes","toHaveBeenCalledWith","title","text","url","window","location","origin","removeItem"],"sources":["D:/de351/pawpaw/frontend/src/components/Post.js"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport Post from './Post';\r\nimport axios from 'axios';\r\nimport { shareContent } from './shareUtil';\r\nimport '@testing-library/jest-dom';\r\n\r\n// Mock axios and shareContent\r\njest.mock('axios');\r\njest.mock('./shareUtil', () => ({\r\n  shareContent: jest.fn(),\r\n}));\r\n\r\nconst mockPost = {\r\n  _id: '1',\r\n  content: 'Check out this cute dog!',\r\n  likes: ['user123'],\r\n};\r\n\r\nconst mockComments = [\r\n  { _id: '1', content: 'Aww, so cute!' },\r\n  { _id: '2', content: 'I love this dog!' },\r\n];\r\n\r\ndescribe('Post Component', () => {\r\n  beforeEach(() => {\r\n    // Mock localStorage data\r\n    localStorage.setItem('token', 'mocked-token');\r\n    localStorage.setItem('userId', 'user123');\r\n  });\r\n\r\n  it('should render the post content and likes correctly', async () => {\r\n    // Mock the axios response for post and comments\r\n    axios.get.mockResolvedValueOnce({\r\n      data: { comments: mockComments },\r\n    });\r\n\r\n    render(<Post post={mockPost} />);\r\n\r\n    // Check if the post content is rendered\r\n    expect(screen.getByText(mockPost.content)).toBeInTheDocument();\r\n    // Check if the like count is rendered\r\n    expect(screen.getByText('1 like')).toBeInTheDocument();\r\n  });\r\n\r\n  it('should handle adding a new comment', async () => {\r\n    axios.get.mockResolvedValueOnce({\r\n      data: { comments: mockComments },\r\n    });\r\n    axios.post.mockResolvedValueOnce({\r\n      data: { success: true, comment: { _id: '3', content: 'Nice post!' } },\r\n    });\r\n\r\n    render(<Post post={mockPost} />);\r\n\r\n    // Input a new comment\r\n    const commentInput = screen.getByPlaceholderText('Write a comment...');\r\n    fireEvent.change(commentInput, { target: { value: 'Nice post!' } });\r\n\r\n    // Submit the comment\r\n    const commentButton = screen.getByText('Comment');\r\n    fireEvent.click(commentButton);\r\n\r\n    // Wait for the new comment to be displayed\r\n    await waitFor(() => screen.getByText('Nice post!'));\r\n\r\n    // Check if the new comment is added\r\n    expect(screen.getByText('Nice post!')).toBeInTheDocument();\r\n  });\r\n\r\n  it('should handle liking the post', async () => {\r\n    axios.get.mockResolvedValueOnce({\r\n      data: { comments: mockComments },\r\n    });\r\n    axios.post.mockResolvedValueOnce({\r\n      data: { success: true, likes: ['user123', 'user456'] },\r\n    });\r\n\r\n    render(<Post post={mockPost} />);\r\n\r\n    // Click the like button\r\n    const likeButton = screen.getByTestId('like-button');\r\n    fireEvent.click(likeButton);\r\n\r\n    // Wait for like count to update\r\n    await waitFor(() => screen.getByText('2 likes'));\r\n\r\n    // Check if like count has been updated\r\n    expect(screen.getByText('2 likes')).toBeInTheDocument();\r\n  });\r\n\r\n  it('should handle sharing the post', () => {\r\n    render(<Post post={mockPost} />);\r\n\r\n    // Click the share button\r\n    const shareButton = screen.getByTestId('share-button');\r\n    fireEvent.click(shareButton);\r\n\r\n    // Check if the shareContent function was called\r\n    expect(shareContent).toHaveBeenCalledTimes(1);\r\n    expect(shareContent).toHaveBeenCalledWith({\r\n      title: mockPost.content,\r\n      text: mockPost.content,\r\n      url: `${window.location.origin}/posts/${mockPost._id}`,\r\n    });\r\n  });\r\n\r\n  it('should show an error if user is not logged in and tries to like or comment', async () => {\r\n    // Remove token from localStorage to simulate user not being logged in\r\n    localStorage.removeItem('token');\r\n\r\n    render(<Post post={mockPost} />);\r\n\r\n    // Try to like the post\r\n    const likeButton = screen.getByTestId('like-button');\r\n    fireEvent.click(likeButton);\r\n\r\n    // Ensure the error message is displayed\r\n    await waitFor(() => expect(screen.getByText('Please log in to like the post.')).toBeInTheDocument());\r\n\r\n    // Try to comment on the post\r\n    const commentInput = screen.getByPlaceholderText('Write a comment...');\r\n    fireEvent.change(commentInput, { target: { value: 'Nice post!' } });\r\n    const commentButton = screen.getByText('Comment');\r\n    fireEvent.click(commentButton);\r\n\r\n    // Ensure the error message is displayed\r\n    await waitFor(() => expect(screen.getByText('Please log in to comment.')).toBeInTheDocument());\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}